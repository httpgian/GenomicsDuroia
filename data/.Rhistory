# Escribe un codigo que imprima un numero y su cuadrado a lo largo de un rango de valores
# Tambien que imprima la suma de todos los cuadrados de dicho rango
# Define el valor minimo y el maximo
lower=1; upper=5
# Crea una variable squaresum que tenga al inicia 0
squaresum = 0
#Loop a lo largo de ese rango y por cada valor:
# Imprime el valor y valor ^2
# Adiciona el valor ^2 a la variable squaresum
for(ii in lower:upper)
{cat(ii,ii^2,"\n")
squaresum = squaresum +ii^2
}
cat ("the sum of Lea's creativity")
# Una vez terminado el loop imprime la variable squaresum
# Escribe un codigo que imprima un numero y su cuadrado a lo largo de un rango de valores
# Tambien que imprima la suma de todos los cuadrados de dicho rango
# Define el valor minimo y el maximo
lower=1; upper=5
# Crea una variable squaresum que tenga al inicia 0
squaresum = 0
#Loop a lo largo de ese rango y por cada valor:
# Imprime el valor y valor ^2
# Adiciona el valor ^2 a la variable squaresum
for(ii in lower:upper)
{cat(ii,ii^2,"\n")
squaresum = squaresum +ii^2
}
cat ("the sum of Lea's creativity")
# Una vez terminado el loop imprime la variable squaresum
# Escribe un codigo que imprima un numero y su cuadrado a lo largo de un rango de valores
# Tambien que imprima la suma de todos los cuadrados de dicho rango
# Define el valor minimo y el maximo
lower=1; upper=5
# Crea una variable squaresum que tenga al inicia 0
squaresum = 0
#Loop a lo largo de ese rango y por cada valor:
# Imprime el valor y valor ^2
# Adiciona el valor ^2 a la variable squaresum
for(ii in lower:upper)
{cat(ii,ii^2,"\n")
squaresum = squaresum +ii^2
}
cat ("the sum of Lea's creativity")
# Una vez terminado el loop imprime la variable squaresum
# Escribe un codigo que imprima un numero y su cuadrado a lo largo de un rango de valores
# Tambien que imprima la suma de todos los cuadrados de dicho rango
# Define el valor minimo y el maximo
lower=1; upper=5
# Crea una variable squaresum que tenga al inicia 0
squaresum = 0
#Loop a lo largo de ese rango y por cada valor:
# Imprime el valor y valor ^2
# Adiciona el valor ^2 a la variable squaresum
for(ii in lower:upper)
{cat(ii,ii^2,"\n")
squaresum = squaresum +ii^2
}
cat ("the sum of Lea's creativity")
# Una vez terminado el loop imprime la variable squaresum
# Escribe un codigo que imprima un numero y su cuadrado a lo largo de un rango de valores
# Tambien que imprima la suma de todos los cuadrados de dicho rango
# Define el valor minimo y el maximo
lower=1; upper=5
# Crea una variable squaresum que tenga al inicia 0
squaresum = 0
#Loop a lo largo de ese rango y por cada valor:
# Imprime el valor y valor ^2
# Adiciona el valor ^2 a la variable squaresum
for(ii in lower:upper)
{cat(ii,ii^2,"\n")
squaresum = squaresum +ii^2
}
cat ("the sum of Lea's creativity")
# Una vez terminado el loop imprime la variable squaresum
# Escribe un codigo que imprima un numero y su cuadrado a lo largo de un rango de valores
# Tambien que imprima la suma de todos los cuadrados de dicho rango
# Define el valor minimo y el maximo
lower=1; upper=5
# Crea una variable squaresum que tenga al inicia 0
squaresum = 0
#Loop a lo largo de ese rango y por cada valor:
# Imprime el valor y valor ^2
# Adiciona el valor ^2 a la variable squaresum
for(ii in lower:upper)
{cat(ii,ii^2,"\n")
squaresum = squaresum +ii^2
}
cat ("the sum of Lea's creativity")
# Una vez terminado el loop imprime la variable squaresum
# Escribe un codigo que imprima un numero y su cuadrado a lo largo de un rango de valores
# Tambien que imprima la suma de todos los cuadrados de dicho rango
# Define el valor minimo y el maximo
lower=1; upper=5
# Crea una variable squaresum que tenga al inicia 0
squaresum = 0
#Loop a lo largo de ese rango y por cada valor:
# Imprime el valor y valor ^2
# Adiciona el valor ^2 a la variable squaresum
for(ii in lower:upper)
{cat(ii,ii^2,"\n")
squaresum = squaresum +ii^2
}
cat ("the sum of Lea's creativity")
# Una vez terminado el loop imprime la variable squaresum
# Escribe un codigo que imprima un numero y su cuadrado a lo largo de un rango de valores
# Tambien que imprima la suma de todos los cuadrados de dicho rango
# Define el valor minimo y el maximo
lower=1; upper=5
# Crea una variable squaresum que tenga al inicia 0
squaresum = 0
#Loop a lo largo de ese rango y por cada valor:
# Imprime el valor y valor ^2
# Adiciona el valor ^2 a la variable squaresum
for(ii in lower:upper)
{cat(ii,ii^2,"\n")
squaresum = squaresum +ii^2
}
cat ("the sum of Lea's creativity")
# Una vez terminado el loop imprime la variable squaresum
# Escribe un codigo que imprima un numero y su cuadrado a lo largo de un rango de valores
# Tambien que imprima la suma de todos los cuadrados de dicho rango
# Define el valor minimo y el maximo
lower=1; upper=5
# Crea una variable squaresum que tenga al inicia 0
squaresum = 0
#Loop a lo largo de ese rango y por cada valor:
# Imprime el valor y valor ^2
# Adiciona el valor ^2 a la variable squaresum
for(ii in lower:upper)
{cat(ii,ii^2,"\n")
squaresum = squaresum +ii^2
}
cat ("the sum of Lea's creativity")
# Una vez terminado el loop imprime la variable squaresum
#Una vez terminado el loop imprime la variable squaresum
# Escribe un codigo que imprima un numero y su cuadrado a lo largo de un rango de valores
# Tambien que imprima la suma de todos los cuadrados de dicho rango
# Define el valor minimo y el maximo
lower=1; upper=5
# Crea una variable squaresum que tenga al inicia 0
squaresum = 0
#Loop a lo largo de ese rango y por cada valor:
# Imprime el valor y valor ^2
# Adiciona el valor ^2 a la variable squaresum
for(ii in lower:upper)
{cat(ii,ii^2,"\n")
squaresum = squaresum +ii^2
}
cat ("the sum of Lea's creativity")
# Una vez terminado el loop imprime la variable squaresum
# Define el valor minimo y el maximo
lower=1; upper=5
# Escribe un codigo que imprima un numero y su cuadrado a lo largo de un rango de valores
# Tambien que imprima la suma de todos los cuadrados de dicho rango
# Define el valor minimo y el maximo
lower=1
upper=5
# Crea una variable squaresum que tenga al inicia 0
squaresum = 0
#Loop a lo largo de ese rango y por cada valor:
# Imprime el valor y valor ^2
# Adiciona el valor ^2 a la variable squaresum
for(ii in lower:upper)
{cat(ii,ii^2,"\n")
squaresum = squaresum +ii^2
}
cat ("the sum of Lea's creativity")
# Una vez terminado el loop imprime la variable squaresum
squaresum
squaresum
getwd()
install.packages('seqinr')
library (seqinr)
read.fasta(data/sequence.fasta)
read.fasta(file =system.file("data/sequence.fasta"), package = "seqinr")
library(seqinr)
read.fasta(file = system.file("data/sequence.fasta", package = "seqinr") , seqtype = c("DNA , "AA""), as.string = F, forceDNAtolower = T, set.attributes = T, legady.mode = T, seqonly = F, strip.desc = F, whole.header = F,
read.fasta(file = system.file("data/sequence.fasta", package = "seqinr") , seqtype = c("DNA , "AA), as.string = F, forceDNAtolower = T, set.attributes = T, legady.mode = T, seqonly = F, strip.desc = F, whole.header = F,
getwd
dnafile = system.file("data/sequence.fasta", package = "seqinr")
dnafile
pwd
setwd (GenomicsDuroia)
gwd
getwd
dnafile = system.file("data/sequence.fasta", package = "seqinr")
smallFastaFile <- system.file("sequences/smallAA.fasta", package = "seqinr")
mySmallProtein <- read.fasta(file = smallFastaFile, as.string = TRUE, seqtype = "AA")[[1]]
stopifnot(mySmallProtein == "SEQINRSEQINRSEQINRSEQINR*")
read.fasta(system.file("data/sequence.fasta"), package = "seqinr")
dnafile = (system.file("data/sequence.fasta"), package = "seqinr")
dnafile = (system.file("data/sequence.fasta"), package = "seqinr")
dnafile = (system.file("data/sequence.fasta", package = "seqinr")
dnafile = system.file("C:\Users\Usuario\Desktop\GenomicsDuroia\data", package = "seqinr")
dnafile = system.file ("C:\Users\Usuario\Desktop\GenomicsDuroia\data", package = "seqinr")
dnafile = system.file ("C:\Users\Usuario\Desktop\GenomicsDuroia\data", package = "seqinr")
dnafile = system.file ("C:\Users\Usuario\Desktop\GenomicsDuroia\data", package = "seqinr")
dnafile = system.file ("C:\Users\Usuario\Desktop\GenomicsDuroia\data", package = "seqinr")
dnafile = system.file ("C:\Users\Usuario\Desktop\GenomicsDuroia\data", package = "seqinr")
dnafile = system.file ("C:/Users/Usuario/Desktop/GenomicsDuroia/data", package = "seqinr")
dnafile = system.file ("C:/Users/Usuario/Desktop/GenomicsDuroia/data/sequence.fasta", package = "seqinr")
dnafile = system.file ("C:/Users/Usuario/Desktop/GenomicsDuroia/data/sequence.fasta", package = "seqinr")
dir
smallFastaFile <- system.file("sequences/smallAA.fasta", package = "seqinr")
mySmallProtein <- read.fasta(file = smallFastaFile, as.string = TRUE, seqtype = "AA")[[1]]
stopifnot(mySmallProtein == "SEQINRSEQINRSEQINRSEQINR*")
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("Biostrings")
library(Biostrings)
library (Biostrings)
# Instalar la libreria "ape"
if(!require('seqinr')) {
install.packages('seqinr')
library('seqinr')
}
#Establecer el directorio de trabajo
setwd ("C:/Users/Usuario/Desktop/GenomicsDuroia/data")
#Establecer trabajo
dnafile = system.file("data/sequence.fasta")
getwd
setwd ("C:/Users/Usuario/Desktop/GenomicsDuroia/data")
getwd()
dnafile = system.file("data/sequence.fasta")
dnafile = system.file("data/sequence.fasta")
dnafile = system.file("data/sequence.fasta")
dnafile = system.file("data/sequence.fasta")
if(!require('ape')) {
install.packages('ape')
library('ape')
if(!require("ape")) {
install.packages("ape", dependencies = T)
library("ape")
}
install.packages("ape", dependencies = T)
install.packages("ape", dependencies = T)
library("ape")
install.packages("ape", dependencies = T)
library("ape")
install.packages("ape")
library("ape")
detach("package:seqinr", unload = TRUE)
install.packages("ape")
library(ape)
Seq1 = read.FASTA ("sequence.fasta", type = "DNA")
setwd ("C:/Users/Usuario/Desktop/GenomicsDuroia/data")
#Revisar el directoro
getwd()
#Abrir archivos .fasta
Seq1 = read.FASTA ("sequence.fasta", type = "DNA")
Seq1
